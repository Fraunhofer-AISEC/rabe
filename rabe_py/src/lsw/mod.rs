//! LSW Encryption and Decryption interface for python
//! ---
//! This is a wrapper
//! Implented in [the lsw source](rabe::schemes::lsw)
//!
//!
//! [`]


use rabe::schemes::lsw::{
    setup as lsw_setup,
    encrypt as lsw_encrypt,
    keygen as lsw_keygen,
    decrypt as lsw_decrypt
};

use rabe::utils::policy::pest::PolicyLanguage;
use pyo3::prelude::*;
use pyo3::exceptions::PyValueError;

mod types;
use types::*;


// The setup algorithm for LSW KP-ABE. Generates a public key (pk) and
// a master key (msk) 
#[pyfunction]
pub fn setup() -> PyResult<(PyKpAbePublicKey, PyKpAbeMasterKey)> {
    let (pk, msk) = lsw_setup();
    let pk = PyKpAbePublicKey{ pk };
    let msk = PyKpAbeMasterKey{ msk };
    Ok((pk, msk))
}


/// The key generation algorithm of LSW KP-ABE.
/// Generates a secret key (sk) using a public key, a master key and a policy given as JSON String.
///
/// # Arguments
///
///	* `_pk` - A Public Key (PK), generated by the function setup()
///	* `_msk` - A Master Key (MSK), generated by the function setup()
///	* `_policy` - An access policy given as JSON String
#[pyfunction]
pub fn keygen(
    pk: &PyKpAbePublicKey,
    msk: &PyKpAbeMasterKey,
    policy: String
)  -> PyResult<PyKpAbeSecretKey> {
    let sk = match lsw_keygen(&pk.pk, &msk.msk, &policy, PolicyLanguage::HumanPolicy) {
        Ok(sk) => PyKpAbeSecretKey{ sk },
        Err(e) => return Err(PyErr::new::<PyValueError, _>(format!("{}", e))),
    };
    Ok(sk)
}

/// The encrypt algorithm of LSW KP-ABE. Generates a new Ciphertext using an public key, a set of attributes given as String Vector and some plaintext data given as [u8].
///
/// # Arguments
///
///	* `_pk` - A Public Key (PK), generated by the function setup()
///	* `_attributes` - A set of attributes given as String Vector
///	* `_plaintext` - plaintext data given as a Vector of u8
///
#[pyfunction]
pub fn encrypt(
    pk: &PyKpAbePublicKey,
    attributes: Vec<String>,
    plaintext: String
) -> PyResult<PyKpAbeCiphertext> {
    let plaintext = plaintext.into_bytes();
    match lsw_encrypt(&pk.pk, &attributes, &plaintext) {
        Some(ct) => Ok(PyKpAbeCiphertext{ ct }),
        _ => return Err(PyErr::new::<PyValueError, _>("None")),
    }
}

/// The decrypt algorithm of LSW KP-ABE. Reconstructs the original plaintext data as Vec<u8>, given a ciphertext with a matching secret key.
///
/// # Arguments
///
///	* `_sk` - A Secret Key (SK), generated by the function keygen()
///	* `_ct` - A LSW KP-ABE Ciphertext
#[pyfunction]
pub fn decrypt(
    sk: &PyKpAbeSecretKey,
    ct: &PyKpAbeCiphertext
) -> PyResult<Vec<u8>> {
    let plaintext: Vec<u8> = match lsw_decrypt(&sk.sk, &ct.ct) {
        Ok(plaintext) => plaintext,
        Err(e) => return Err(PyErr::new::<PyValueError, _>(format!("{}", e))),
    };
    Ok(plaintext)
}

/// Adds functions that are supposed to be called from python.
/// A function that adds the classes and functions that should be accessible from python.
#[pymodule]
pub fn lsw(_py: Python, m: &PyModule) -> PyResult<()> {
    crate::add_functions!(m;setup,keygen,encrypt,decrypt);
    crate::add_types!(m;PyKpAbeCiphertext, PyKpAbeMasterKey, PyKpAbePublicKey, PyKpAbeSecretKey);
    Ok(())
}