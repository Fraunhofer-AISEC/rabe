//! `BSW` scheme by John Bethencourt, Amit Sahai, Brent Waters.
//!
//! * Developped by John Bethencourt, Amit Sahai, Brent Waters, "Ciphertext-Policy Attribute-Based Encryption"
//! * Published in Security and Privacy, 2007. SP'07. IEEE Symposium on. IEEE
//! * Available from <https://doi.org/10.1109/SP.2007.11>
//! * Type: encryption (attribute-based)
//! * Setting: bilinear groups (asymmetric)
//! * Authors: Georg Bramm
//! * Date: 04/2018
//!
//! # Examples
//!
//! ```
//!use rabe::schemes::bsw::*;
//! use rabe::utils::policy::pest::PolicyLanguage;
//!let (pk, msk) = setup();
//!let plaintext = String::from("dance like no one's watching, encrypt like everyone is!").into_bytes();
//!let policy = String::from(r#""A" and "B""#);
//!let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::HumanPolicy).unwrap();
//!let sk: CpAbeSecretKey = keygen(&pk, &msk, &vec!["A", "B"]).unwrap();
//!assert_eq!(decrypt(&sk, &ct_cp).unwrap(), plaintext);
//! ```
use rabe_bn::{Fr, G1, G2, Gt, pairing};
use rand::Rng;
use utils::{
    secretsharing::{gen_shares_policy, calc_pruned, calc_coefficients},
    tools::*,
    aes::*,
    hash::*
};
use utils::policy::pest::{PolicyLanguage, parse, PolicyType};
use crate::error::RabeError;
#[cfg(not(feature = "borsh"))]
use serde::{Serialize, Deserialize};
#[cfg(feature = "borsh")]
use borsh::{BorshSerialize, BorshDeserialize};
use utils::policy::pest::json;

/// A BSW Public Key (PK)
#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "borsh", derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(not(feature = "borsh"), derive(Serialize, Deserialize))]
pub struct CpAbePublicKey {
    pub g1: G1,
    pub g2: G2,
    pub h: G1,
    pub f: G2,
    pub e_gg_alpha: Gt,
}

/// A BSW Master Key (MSK)
#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "borsh", derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(not(feature = "borsh"), derive(Serialize, Deserialize))]
pub struct CpAbeMasterKey {
    pub beta: Fr,
    pub g2_alpha: G2,
}

/// A BSW Ciphertext (CT)
#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "borsh", derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(not(feature = "borsh"), derive(Serialize, Deserialize))]
pub struct CpAbeCiphertext {
    pub policy: (String, PolicyLanguage),
    pub c: G1,
    pub c_p: Gt,
    pub c_y: Vec<CpAbeAttribute>,
    pub data: Vec<u8>,
}

/// A BSW Secret User Key (SK)
#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "borsh", derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(not(feature = "borsh"), derive(Serialize, Deserialize))]
pub struct CpAbeSecretKey {
    pub d: G2,
    pub d_j: Vec<CpAbeAttribute>,
}

/// A BSW Attribute
#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "borsh", derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(not(feature = "borsh"), derive(Serialize, Deserialize))]
pub struct CpAbeAttribute {
    pub string: String,
    pub g1: G1,
    pub g2: G2,
}

/// The setup algorithm of BSW CP-ABE. Generates a new CpAbePublicKey and a new CpAbeMasterKey.
pub fn setup() -> (CpAbePublicKey, CpAbeMasterKey) {
    // random number generator
    let mut rng = rand::thread_rng();
    // generator of group G1: g1 and generator of group G2: g2
    let g1:G1 = rng.gen();
    let g2:G2 = rng.gen();
    // random
    let beta:Fr = rng.gen();
    let alpha:Fr = rng.gen();
    // vectors
    // calulate h and f
    let h = g1 * beta;
    let f = g2 * beta.inverse().unwrap();
    // calculate g2^alpha
    let g2_alpha = g2 * alpha;
    // calculate the pairing between g1 and g2^alpha
    let e_gg_alpha = pairing(g1, g2_alpha);

    // return PK and MSK
    return (
        CpAbePublicKey { g1, g2, h, f, e_gg_alpha },
        CpAbeMasterKey { beta, g2_alpha },
    );
}

/// The key generation algorithm of BSW CP-ABE. Generates a CpAbeSecretKey using a CpAbePublicKey, a CpAbeMasterKey and a set of attributes given as Vec<String>.
///
/// # Arguments
///
///	* `_pk` - A Public Key (PK), generated by the function setup()
///	* `_msk` - A Master Key (MSK), generated by the function setup()
///	* `_attributes` - A Vector of String attributes assigned to this user key
///
pub fn keygen(
    pk: &CpAbePublicKey,
    msk: &CpAbeMasterKey,
    attributes: &[&str],
) -> Option<CpAbeSecretKey> {
    // if no attibutes or an empty policy
    // maybe add empty msk also here
    if attributes.is_empty() || attributes.len() == 0 {
        return None;
    }
    // random number generator
    let mut _rng = rand::thread_rng();
    // generate random r1 and r2 and sum of both
    // compute Br as well because it will be used later too
    let _r:Fr = _rng.gen();
    let _g_r = pk.g2 * _r;
    let _d = (msk.g2_alpha + _g_r) * msk.beta.inverse().unwrap();
    let mut _d_j: Vec<CpAbeAttribute> = Vec::new();
    for _j in attributes {
        let _r_j:Fr = _rng.gen();
        _d_j.push(CpAbeAttribute {
            string: _j.to_string(), // attribute name
            g1: pk.g1 * _r_j, // D_j Prime
            g2: _g_r + (sha3_hash(pk.g2, _j).expect("could not hash _j") * _r_j), // D_j
        });
    }
    return Some(CpAbeSecretKey { d: _d, d_j: _d_j });
}

/// The delegate generation algorithm of BSW CP-ABE. Generates a new CpAbeSecretKey using a CpAbePublicKey, a CpAbeSecretKey and a subset of attributes (of the key _sk) given as Vec<String>.
///
/// # Arguments
///
///	* `_pk` - A Public Key (PK), generated by the function setup()
///	* `_sk` - A Secret User Key (SK), generated by the function keygen()
///	* `_attributes` - A Vector of String attributes assigned to this user key
///
pub fn delegate(
    pk: &CpAbePublicKey,
    sk: &CpAbeSecretKey,
    subset: &[&str],
) -> Option<CpAbeSecretKey> {
    let _str_attr = sk.d_j
        .iter()
        .map(|_values| _values.string.as_str())
        .collect::<Vec<_>>();
    return if !is_subset(subset, &_str_attr) {
        println!("Error: the given attribute set is not a subset of the given sk.");
        None
    } else {
        // if no attibutes or an empty policy
        // maybe add empty msk also here
        if subset.is_empty() || subset.len() == 0 {
            println!("Error: the given attribute subset is empty.");
            return None;
        }
        // random number generator
        let mut _rng = rand::thread_rng();
        // generate random r
        let _r: Fr = _rng.gen();
        // calculate derived _k_0
        let mut _d_k: Vec<CpAbeAttribute> = Vec::new();
        // calculate derived attributes
        for attr in subset {
            let _r_j: Fr = _rng.gen();
            let _d_j_val = sk.d_j
                .iter()
                .find(|x| x.string == attr.to_string())
                .map(|x| (x.g1, x.g2))
                .unwrap();
            _d_k.push(CpAbeAttribute {
                string: attr.to_string(),
                g1: _d_j_val.0 + (pk.g1 * _r_j),
                g2: _d_j_val.1 + (sha3_hash(pk.g2, attr.as_ref()).expect("could not hash _attr") * _r_j) + (pk.g2 * _r),
            });
        }
        Some(CpAbeSecretKey {
            d: sk.d + (pk.f * _r),
            d_j: _d_k,
        })
    }
}

/// The encrypt algorithm of BSW CP-ABE. Generates a new CpAbeCiphertext using an Ac17PublicKey, an access policy given as String and some plaintext data given as [u8].
///
/// # Arguments
///
///	* `_pk` - A Public Key (PK), generated by the function setup()
///	* `_policy` - An access policy given as JSON String
///	* `_plaintext` - plaintext data given as a Vector of u8
///
pub fn encrypt(
    pk: &CpAbePublicKey,
    policy: &str,
    data: &[u8],
    language: PolicyLanguage,
) -> Result<CpAbeCiphertext, RabeError> {
    if data.is_empty() || policy.is_empty() {
        RabeError::new("Error in bsw/encrypt: Plaintext or policy is empty.");
    }
    let mut _rng = rand::thread_rng();
    // the shared root secret
    let secret:Fr = _rng.gen();
    let msg: Gt = _rng.gen();
    match parse(policy, language) {
        Ok(policy_value) => {
            let _shares: Vec<(String, Fr)> = gen_shares_policy(secret, &policy_value, None).unwrap();
            let _c = pk.h * secret;
            let _c_p = pk.e_gg_alpha.pow(secret) * msg;
            let mut _c_y: Vec<CpAbeAttribute> = Vec::new();
            for (_j, _j_val) in _shares.clone() {
                _c_y.push(CpAbeAttribute {
                    string: _j.clone(),
                    g1: pk.g1 * _j_val,
                    g2: sha3_hash(pk.g2, &_j).expect("could not hash _j") * _j_val,
                });
            }
            println!("BSW Shares {:?}", _shares);
            let policy_string = policy.to_string();
            let ciphertext_data = encrypt_symmetric(msg, &data.to_vec()).unwrap();
            //Encrypt plaintext using derived key from secret
            return Ok(CpAbeCiphertext { policy: (policy_string, language), c: _c, c_p: _c_p, c_y: _c_y, data: ciphertext_data });
        }
        Err(e) => Err(e)
    }

}

/// The decrypt algorithm of BSW CP-ABE. Reconstructs the original plaintext data as Vec<u8>, given a CpAbeCiphertext with a matching CpAbeSecretKey.
///
/// # Arguments
///
///	* `_sk` - A Secret Key (SK), generated by the function keygen()
///	* `_ct` - An BSW CP-ABE Ciphertext
///
pub fn decrypt(
    sk: &CpAbeSecretKey,
    ct: &CpAbeCiphertext
) -> Result<Vec<u8>, RabeError> {
    let _str_attr = sk.d_j
        .iter()
        .map(|_values| _values.string.to_string())
        .collect::<Vec<_>>();
    match parse(ct.policy.0.as_ref(), ct.policy.1) {
        Ok(pol) => {
            return if traverse_policy(&_str_attr, &pol, PolicyType::Leaf) == false {
                Err(RabeError::new("Error in bsw/encrypt: attributes do not match policy."))
            } else {
                match calc_pruned(&_str_attr, &pol, None) {
                    Err(e) => Err(e),
                    Ok(_pruned) => {
                        if !_pruned.0 {
                            Err(RabeError::new("Error in bsw/encrypt: attributes do not match policy."))
                        } else {
                            println!("pruned: {:?}", _pruned.1.clone());
                            let _z = calc_coefficients(&pol, Some(Fr::one()), None).unwrap();
                            let mut _a = Gt::one();
                            for _j in _pruned.1 {
                                match ct.c_y.iter().find(|x| x.string == _j.to_string()) {
                                    Some(_c_j) => {
                                        match sk.d_j.iter().find(|x| x.string == _j.to_string()) {
                                            Some(_d_j) => {
                                                for _z_tuple in _z.iter() {
                                                    if _z_tuple.0 == _j {
                                                        _a = _a *
                                                            (pairing(_c_j.g1, _d_j.g2) *
                                                                pairing(_d_j.g1, _c_j.g2).inverse())
                                                                .pow(_z_tuple.1);
                                                    }
                                                }
                                            }
                                            None => {
                                                // do nothing
                                            }
                                        }
                                    }
                                    None => {
                                        // do nothing
                                    }
                                }
                            }
                            let _msg = ct.c_p * ((pairing(ct.c, sk.d)) * _a.inverse()).inverse();
                            // Decrypt plaintext using derived secret from cp-abe scheme
                            decrypt_symmetric(_msg, &ct.data)
                        }
                    }
                }
            }
        },
        Err(e) => Err(e)
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn or() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("D");
        att_matching.push("B");

        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("C");
        att_not_matching.push("D");

        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();

        // our policy
        let policy = String::from(r#"{"name": "or", "children": [{"name": "A"}, {"name": "B"}]}"#);

        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();

        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);

        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn and10() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<String> = Vec::new();
        for n in 1..11 {
            att_matching.push(["attr".to_string(), n.to_string()].concat());
        }
        let att: Vec<&str>  = att_matching.iter().map(|x| x.as_ref()).collect();
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("attr201");
        att_not_matching.push("attr200");

        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();

        let mut _policy = String::from("{\"name\": \"and\", \"children\": [");
        for n in 1..11 {
            let mut _current = String::from("{\"name\": \"attr");
            if n < 10 {
                _current.push_str(&n.to_string());
                _current.push_str(&String::from("\"}, "));
            } else {
                _current.push_str(&n.to_string());
                _current.push_str(&String::from("\"}]"));
            }
            _policy.push_str(&_current);
        }
        _policy.push_str(&String::from("}"));
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &_policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();

        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);

        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn nested() {
        // setup scheme
        let (pk, msk) = setup();
        let _num_nested = 30; // maximum at about 50 to 60
        // a set of two attributes matching the policy
        let mut att_matching: Vec<String> = Vec::new();
        for _i in 1..(_num_nested + 1) {
            att_matching.push(["a".to_string(), _i.to_string()].concat());
        }
        let attr: Vec<&str> = att_matching.iter().map(|x| x.as_ref()).collect();
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("x");
        att_not_matching.push("y");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        let mut policy = String::from("{\"name\":\"and\", \"children\": [{\"name\": \"a2\"}, {\"name\": \"a1\"}]}");
        for _i in 3.._num_nested {
            let mut policy_str = String::from("{\"name\":\"and\", \"children\":[");
            policy_str.push_str("{\"name\":\"");
            policy_str.push_str(&attr[_i - 1]);
            policy_str.push_str("\"},");
            policy_str.push_str(&policy);
            policy_str.push_str("]}");
            policy = policy_str.clone();
        }
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &attr).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn or3() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");

        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("B");
        att_not_matching.push("C");

        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();

        // our policy
        let policy = String::from(r#"{"name": "or", "children": [{"name": "X"}, {"name": "Y"}, {"name": "A"}]}"#);

        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();

        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn and() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");
        att_matching.push("B");
        att_matching.push("C");
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("A");
        att_not_matching.push("D");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        // our policy
        let policy = String::from(r#"{"name": "and", "children":  [{"name": "A"}, {"name": "B"}]}"#);
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn dual_attributes() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");
        att_matching.push("B");
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("A");
        att_not_matching.push("C");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        // our policy
        let policy = String::from(r#"{"name": "or", "children": [{"name": "and", "children":  [{"name": "A"}, {"name": "B"}]}, {"name": "and", "children":  [{"name": "B"}, {"name": "C"}]}]}"#);
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        println!("ct_cp: {:?}", ct_cp);
        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn and3() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");
        att_matching.push("B");
        att_matching.push("C");
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("A");
        att_not_matching.push("D");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        // our policy
        let policy = String::from(r#"{"name": "and", "children":  [{"name": "A"}, {"name": "B"}, {"name": "C"}]}"#);
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);

        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn or_and() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of two attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");
        att_matching.push("B");
        att_matching.push("C");
        att_matching.push("D");
        // a set of two attributes NOT matching the policy
        let mut att_not_matching: Vec<&str> = Vec::new();
        att_not_matching.push("A");
        att_not_matching.push("C");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        // our policy
        let policy = String::from(r#"{"name": "or", "children": [{"name": "and", "children":  [{"name": "A"}, {"name": "B"}]}, {"name": "and", "children":  [{"name": "C"}, {"name": "D"}]}]}"#);
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        // and now decrypt again with mathcing sk
        let _match = decrypt(&keygen(&pk, &msk, &att_matching).unwrap(), &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
        let _no_match = decrypt(&keygen(&pk, &msk, &att_not_matching).unwrap(), &ct_cp);
        assert_eq!(_no_match.is_ok(), false);
    }

    #[test]
    fn delegate_ab() {
        // setup scheme
        let (pk, msk) = setup();
        // a set of three attributes matching the policy
        let mut att_matching: Vec<&str> = Vec::new();
        att_matching.push("A");
        att_matching.push("B");
        att_matching.push("C");
        // a set of two delegated attributes
        let mut delegate_att: Vec<&str> = Vec::new();
        delegate_att.push("A");
        delegate_att.push("B");
        // our plaintext
        let plaintext = String::from("dance like no one's watching, encrypt like everyone is!")
            .into_bytes();
        // our policy
        let policy = String::from(r#"{"name": "and", "children":  [{"name": "A"}, {"name": "B"}]}"#);
        // cp-abe ciphertext
        let ct_cp: CpAbeCiphertext = encrypt(&pk, &policy, &plaintext, PolicyLanguage::JsonPolicy).unwrap();
        // a cp-abe SK key matching
        let sk: CpAbeSecretKey = keygen(&pk, &msk, &att_matching).unwrap();
        // delegate a cp-abe SK
        let del: CpAbeSecretKey = delegate(&pk, &sk, &delegate_att).unwrap();
        // and now decrypt again with mathcing sk
        let _match = decrypt(&del, &ct_cp);
        assert_eq!(_match.is_ok(), true);
        assert_eq!(_match.unwrap(), plaintext);
    }
}
